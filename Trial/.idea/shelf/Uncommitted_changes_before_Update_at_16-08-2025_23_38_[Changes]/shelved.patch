Index: src/main/java/Stock_Predictor/JDBC_Manager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Stock_Predictor;\r\n\r\nimport java.sql.*;\r\nimport java.time.Instant;\r\n\r\npublic class JDBC_Manager {\r\n\r\n\r\n    private final Connection connection = new JDBC_Connection().SQLConnection();\r\n\r\n    private final String create_Database = \"Create Database Sem_2Pro;\";\r\n\r\n\r\n    String getCreate_generalTable(String stockname) {\r\n        String tableName = stockname;\r\n        String create_generalTable = \"CREATE TABLE IF NOT EXISTS \" + tableName + \" (\" +\r\n                \" Date DATE PRIMARY KEY,\" +\r\n                \" Open NUMERIC(10,3),\" +\r\n                \" High NUMERIC(10,3),\" +\r\n                \" Low NUMERIC(10,3),\" +\r\n                \" Close NUMERIC(10,3),\" +\r\n                \" Volume NUMERIC(15,2),\" +\r\n                \" VWAP NUMERIC(10,3),\" +\r\n                \" TypicalPrice NUMERIC(10,3),\" +\r\n                \" SMA_5 NUMERIC(10,3),\" +\r\n                \" SMA_10 NUMERIC(10,3),\" +\r\n                \" SMA_15 NUMERIC(10,3),\" +\r\n                \" SMA_50 NUMERIC(10,3),\" +\r\n                \" SMA_100 NUMERIC(10,3),\" +\r\n                \" SMA_200 NUMERIC(10,3),\" +\r\n                \" EMA_5 NUMERIC(10,3),\" +\r\n                \" EMA_10 NUMERIC(10,3),\" +\r\n                \" EMA_15 NUMERIC(10,3),\" +\r\n                \" EMA_50 NUMERIC(10,3),\" +\r\n                \" EMA_100 NUMERIC(10,3),\" +\r\n                \" EMA_200 NUMERIC(10,3),\" +\r\n                \" RSI_14 NUMERIC(10,3),\" +\r\n                \" RSI_30 NUMERIC(10,3),\" +\r\n                \" MACDLine NUMERIC(10,3),\" +\r\n                \" SignalLine NUMERIC(10,3),\" +\r\n                \" upperBand NUMERIC(10,3),\" +\r\n                \" middleBand NUMERIC(10,3),\" +\r\n                \" lowerBand NUMERIC(10,3),\" +\r\n                \" Stochastic NUMERIC(10,3)\" +\r\n                \");\";\r\n\r\n        return create_generalTable;\r\n    }\r\n\r\n    String getUser_data(String username) {\r\n        String User_data = \"Create Table IF NOT EXISTS \" + username + \"(\" +\r\n                \"UserId serial PRIMARY KEY,Stock varchar(50),Quantity Integer,Purchase_Price Numeric\" +\r\n                \");\";\r\n        return User_data;\r\n    }\r\n\r\n    boolean create_table_GeneralTable(String stockName) {\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            return !statement.execute(getCreate_generalTable(stockName));\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    boolean create_User(String Name) {\r\n        try {\r\n            Statement statement = connection.createStatement();\r\n            return !statement.execute(getUser_data(Name));\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    boolean create_Rest() {\r\n        try {\r\n            String table_Users = \"Create Table If Not Exists USERS(\" +\r\n                    \"UserId serial PRIMARY KEY,Username varchar(50),Password varchar(50),\" +\r\n                    \"Pancard varchar(10) NOT NULL UNIQUE ,AadharCard varchar(12) NOT NULL UNIQUE,Mobile varchar(10) NOT NULL UNIQUE\" +\r\n                    \",lastlogin TIMESTAMP);\";\r\n\r\n            String prediction_table = \"Create Table If not Exists PredictionAcc(\" +\r\n                    \"Stock varchar(50),Prediction_Short numeric(3,2),Prediction_Long numeric(3,2)\" +\r\n                    \");\";\r\n\r\n            Statement statement = connection.createStatement();\r\n\r\n            statement.execute(table_Users);\r\n            statement.execute(prediction_table);\r\n            return true;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public Date toCall_Dataformatter(String dateString) {\r\n        /*\r\n       CREATE OR REPLACE FUNCTION DateFormatter(date_string TEXT)\r\nRETURNS DATE\r\nLANGUAGE plpgsql\r\nAS $$\r\nDECLARE\r\n    -- Variable to hold the successfully converted date.\r\n    converted_date DATE;\r\nBEGIN\r\n    -- Return NULL immediately if input is NULL or empty to avoid unnecessary processing.\r\n    IF date_string IS NULL OR date_string = '' THEN\r\n        RETURN NULL;\r\n    END IF;\r\n\r\n    -- Attempt 1: ISO Format (YYYY-MM-DD)\r\n    -- This is the standard and should be tried first.\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'YYYY-MM-DD');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- If it fails, silently continue to the next format.\r\n    END;\r\n\r\n    -- Attempt 2: Abbreviated Month (e.g., '1-Jul-24' or '01-Jul-2024')\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'DD-Mon-YY');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- Continue.\r\n    END;\r\n\r\n    -- Attempt 3: Full Month Name (e.g., '8-August-2024')\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'DD-Month-YYYY');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- Continue.\r\n    END;\r\n\r\n    -- Attempt 4: Common US Format (e.g., '08/25/2024')\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'MM/DD/YYYY');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- Continue.\r\n    END;\r\n\r\n    -- Attempt 5: Common European Format (e.g., '25/08/2024')\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'DD/MM/YYYY');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- Continue.\r\n    END;\r\n\r\n    -- Attempt 6: Textual Month (e.g., 'August 8, 2024')\r\n    BEGIN\r\n        converted_date := TO_DATE(date_string, 'Month DD, YYYY');\r\n        RETURN converted_date;\r\n    EXCEPTION WHEN others THEN\r\n        -- Continue.\r\n    END;\r\n\r\n    -- If all attempts have failed, the format is unrecognized.\r\n    -- Return NULL to indicate failure to parse.\r\n    RETURN NULL;\r\nEND;\r\n$$;\r\n\r\n         */\r\n        try {\r\n            PreparedStatement preparedStatement = connection.prepareStatement(\"SELECT DateFormatter(?)\");\r\n            preparedStatement.setString(1, dateString);\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            resultSet.next();\r\n            return resultSet.getDate(1);\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    boolean insert_StockData(String name, Stock_Data stockData) {\r\n\r\n        try {\r\n            String sql = \"Insert into \" + name + \" values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)ON CONFLICT DO NOTHING\";\r\n            // Assuming 'stockData' is your data object and 'connection' is your SQL connection\r\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n\r\n            preparedStatement.setDate(1, stockData.getOfficial_date());\r\n            preparedStatement.setDouble(2, stockData.getOpen());\r\n            preparedStatement.setDouble(3, stockData.getHigh());\r\n            preparedStatement.setDouble(4, stockData.getLow());\r\n            preparedStatement.setDouble(5, stockData.getClose());\r\n            preparedStatement.setDouble(6, stockData.getVolume());\r\n            preparedStatement.setDouble(7, stockData.getVwap());\r\n            preparedStatement.setDouble(8, stockData.getTypicalPrice());\r\n            preparedStatement.setDouble(9, stockData.getSma_5());\r\n            preparedStatement.setDouble(10, stockData.getSma_10());\r\n            preparedStatement.setDouble(11, stockData.getSma_15());\r\n            preparedStatement.setDouble(12, stockData.getSma_50());\r\n            preparedStatement.setDouble(13, stockData.getSma_100());\r\n            preparedStatement.setDouble(14, stockData.getSma_200());\r\n            preparedStatement.setDouble(15, stockData.getEma_5());\r\n            preparedStatement.setDouble(16, stockData.getEma_10());\r\n            preparedStatement.setDouble(17, stockData.getEma_15());\r\n            preparedStatement.setDouble(18, stockData.getEma_50());\r\n            preparedStatement.setDouble(19, stockData.getEma_100());\r\n            preparedStatement.setDouble(20, stockData.getEma_200());\r\n            preparedStatement.setDouble(21, stockData.getRsi_14());\r\n            preparedStatement.setDouble(22, stockData.getRsi_30());\r\n            preparedStatement.setDouble(23, stockData.getMacdline());\r\n            preparedStatement.setDouble(24, stockData.getSignalline());\r\n            preparedStatement.setDouble(25, stockData.getUpperband());\r\n            preparedStatement.setDouble(26, stockData.getMiddleband());\r\n            preparedStatement.setDouble(27, stockData.getLowerband());\r\n            preparedStatement.setDouble(28, stockData.getStochastic());\r\n\r\n            return preparedStatement.executeUpdate() >= 0;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public Connection getConnection() {\r\n        return connection;\r\n    }\r\n\r\n    void listTables() {\r\n        DatabaseMetaData dbMeta = null;\r\n        try {\r\n            dbMeta = connection.getMetaData();\r\n            ResultSet rs = dbMeta.getTables(connection.getCatalog(), \"\", null, new String[]{\"TABLE\"});\r\n            while (rs.next()) {\r\n                String tableName = rs.getString(\"TABLE_NAME\");\r\n                System.out.println(tableName);\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    void update_recalculatedData(String name, Stock_Data stockData) {\r\n\r\n        try {\r\n            String sql = \"INSERT INTO  \" + name + \" VALUES (\" +\r\n                    \"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" +\r\n                    \"ON CONFLICT (official_date)\" +\r\n                    \"DO UPDATE SET\" +\r\n                    \"    open = EXCLUDED.open,\" +\r\n                    \"    high = EXCLUDED.high,\" +\r\n                    \"    low = EXCLUDED.low,\" +\r\n                    \"    close = EXCLUDED.close,\" +\r\n                    \"    volume = EXCLUDED.volume,\" +\r\n                    \"    vwap = EXCLUDED.vwap,\" +\r\n                    \"    typicalPrice = EXCLUDED.typicalPrice,\" +\r\n                    \"    sma_5 = EXCLUDED.sma_5,\" +\r\n                    \"    sma_10 = EXCLUDED.sma_10,\" +\r\n                    \"    sma_15 = EXCLUDED.sma_15,\" +\r\n                    \"    sma_50 = EXCLUDED.sma_50,\" +\r\n                    \"    sma_100 = EXCLUDED.sma_100,\" +\r\n                    \"    sma_200 = EXCLUDED.sma_200,\" +\r\n                    \"    ema_5 = EXCLUDED.ema_5,\" +\r\n                    \"    ema_10 = EXCLUDED.ema_10,\" +\r\n                    \"    ema_15 = EXCLUDED.ema_15,\" +\r\n                    \"    ema_50 = EXCLUDED.ema_50,\" +\r\n                    \"    ema_100 = EXCLUDED.ema_100,\" +\r\n                    \"    ema_200 = EXCLUDED.ema_200,\" +\r\n                    \"    rsi_14 = EXCLUDED.rsi_14,\" +\r\n                    \"    rsi_30 = EXCLUDED.rsi_30,\" +\r\n                    \"    macdline = EXCLUDED.macdline,\" +\r\n                    \"    signalline = EXCLUDED.signalline,\" +\r\n                    \"    upperband = EXCLUDED.upperband,\" +\r\n                    \"    middleband = EXCLUDED.middleband,\" +\r\n                    \"    lowerband = EXCLUDED.lowerband,\" +\r\n                    \"    stochastic = EXCLUDED.stochastic;\";\r\n\r\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n\r\n            preparedStatement.setDate(1, stockData.getOfficial_date());\r\n            preparedStatement.setDouble(2, stockData.getOpen());\r\n            preparedStatement.setDouble(3, stockData.getHigh());\r\n            preparedStatement.setDouble(4, stockData.getLow());\r\n            preparedStatement.setDouble(5, stockData.getClose());\r\n            preparedStatement.setDouble(6, stockData.getVolume());\r\n            preparedStatement.setDouble(7, stockData.getVwap());\r\n            preparedStatement.setDouble(8, stockData.getTypicalPrice());\r\n            preparedStatement.setDouble(9, stockData.getSma_5());\r\n            preparedStatement.setDouble(10, stockData.getSma_10());\r\n            preparedStatement.setDouble(11, stockData.getSma_15());\r\n            preparedStatement.setDouble(12, stockData.getSma_50());\r\n            preparedStatement.setDouble(13, stockData.getSma_100());\r\n            preparedStatement.setDouble(14, stockData.getSma_200());\r\n            preparedStatement.setDouble(15, stockData.getEma_5());\r\n            preparedStatement.setDouble(16, stockData.getEma_10());\r\n            preparedStatement.setDouble(17, stockData.getEma_15());\r\n            preparedStatement.setDouble(18, stockData.getEma_50());\r\n            preparedStatement.setDouble(19, stockData.getEma_100());\r\n            preparedStatement.setDouble(20, stockData.getEma_200());\r\n            preparedStatement.setDouble(21, stockData.getRsi_14());\r\n            preparedStatement.setDouble(22, stockData.getRsi_30());\r\n            preparedStatement.setDouble(23, stockData.getMacdline());\r\n            preparedStatement.setDouble(24, stockData.getSignalline());\r\n            preparedStatement.setDouble(25, stockData.getUpperband());\r\n            preparedStatement.setDouble(26, stockData.getMiddleband());\r\n            preparedStatement.setDouble(27, stockData.getLowerband());\r\n            preparedStatement.setDouble(28, stockData.getStochastic());\r\n\r\n            preparedStatement.executeUpdate();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    void insert_user(String username, String password, String pancard, String aadharcard,\r\n                     String mobile, Instant lastlogin) {\r\n        try {\r\n            String sql = \"Insert into users(username,password,pancard,aadharcard,mobile,lastlogin) values (?,?,?,?,?,?);\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n            preparedStatement.setString(1, username);\r\n            preparedStatement.setString(2, password);\r\n            preparedStatement.setString(3, pancard);\r\n            preparedStatement.setString(4, aadharcard);\r\n            preparedStatement.setString(5, mobile);\r\n            preparedStatement.setTimestamp(6, Timestamp.from(lastlogin));\r\n\r\n            preparedStatement.executeUpdate();\r\n            create_User(username);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    boolean check_data(String username, String password) {\r\n        try {\r\n            String sql = \"Select password from users where username = ?\";\r\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n\r\n            preparedStatement.setString(1, username);\r\n\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            resultSet.next();\r\n            return password.equals(resultSet.getString(1));\r\n\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n
===================================================================
diff --git a/src/main/java/Stock_Predictor/JDBC_Manager.java b/src/main/java/Stock_Predictor/JDBC_Manager.java
--- a/src/main/java/Stock_Predictor/JDBC_Manager.java	(revision b4a3c7d2acae4ef8be8d68e3281ae55e32560f47)
+++ b/src/main/java/Stock_Predictor/JDBC_Manager.java	(date 1755202558594)
@@ -7,7 +7,6 @@
 
 
     private final Connection connection = new JDBC_Connection().SQLConnection();
-
     private final String create_Database = "Create Database Sem_2Pro;";
 
 
Index: src/main/java/Stock_Predictor/JDBC_Connection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Stock_Predictor;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\n\r\npublic class JDBC_Connection {\r\n\r\n    Connection SQLConnection() {\r\n        String URL = \"jdbc:postgresql://localhost:5432/sem_2pro\";\r\n        String USER = \"postgres\";\r\n        String PASSWORD = \"Shlok@0812\";\r\n\r\n        Connection connection = null;\r\n        try {\r\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\r\n\r\n            if (connection != null && !connection.isClosed()) {\r\n                System.out.println(\"\\u001B[32mConnected to the database successfully.\\u001B[0m\");\r\n\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\" Database connection failed.\");\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return connection;\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/Stock_Predictor/JDBC_Connection.java b/src/main/java/Stock_Predictor/JDBC_Connection.java
--- a/src/main/java/Stock_Predictor/JDBC_Connection.java	(revision b4a3c7d2acae4ef8be8d68e3281ae55e32560f47)
+++ b/src/main/java/Stock_Predictor/JDBC_Connection.java	(date 1755199708767)
@@ -9,7 +9,7 @@
     Connection SQLConnection() {
         String URL = "jdbc:postgresql://localhost:5432/sem_2pro";
         String USER = "postgres";
-        String PASSWORD = "Shlok@0812";
+        String PASSWORD = "#Dhruv13";
 
         Connection connection = null;
         try {
